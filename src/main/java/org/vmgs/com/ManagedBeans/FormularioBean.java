package org.vmgs.com.ManagedBeans;

import java.io.Serializable;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import javax.faces.bean.ManagedBean;
//import javax.faces.bean.SessionScoped;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;
import org.vmgs.com.clases.Persona;
import javax.faces.event.ActionEvent;
import javax.faces.context.FacesContext;  
import org.primefaces.event.RowEditEvent;  
import javax.faces.application.FacesMessage;
import org.vmgs.com.daos.PersonaDao;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import javax.faces.event.ComponentSystemEvent;
import javax.annotation.PostConstruct;
import org.vmgs.com.clases.utilidades.*;

@ManagedBean
@Component("formularioBean")
@RequestScoped
@Transactional//esto deberia ir en el servicio
public class FormularioBean {
	@Autowired
	private PersonaDao personaDao;
	
	/*-----------Members  ------------------------*/
	private Persona persona;
	// Generated by Map , int es primitivo por eso uso Integer que es el wrapper
	private static Map<String, Integer> MapTecnologies;
	//combo source
	private static Map<String, Integer> MapFoot;
	private List<Persona> personaLista=new ArrayList<Persona>();
	private String currentTheme;
	private static Map<String,String> themes;
	/*-----------Members  ------------------------*/

	

	/**
	 * @return the persona
	 */
	public Persona getPersona() {
		return persona;
	}


	public void setPersona(Persona persona) {
		this.persona = persona;
	}
	
	public String getCurrentTheme(){
		return (this.currentTheme == null || this.currentTheme.equals("")) ? "aristo" : this.currentTheme;
	}
	
	public void setCurrentTheme(String value){
		this.currentTheme= value;
	}

	static {
		MapTecnologies = new HashMap<String, Integer>();// label, value
		MapTecnologies.put("Phyton", 1);
		MapTecnologies.put("C#", 2);
		MapTecnologies.put("SQL", 3);
		MapTecnologies.put("JavaScript", 4);
		MapTecnologies.put("VB.NET", 5);
		
		MapFoot = new TreeMap<String, Integer>();// label, value
		MapFoot.put("Sopa", 1);
		MapFoot.put("Ensalada", 2);
		MapFoot.put("Pescado", 3);
		 
		themes = new TreeMap<String,String>();
		themes.put("Aristo", "aristo");  
        themes.put("Black-Tie", "black-tie");  
        themes.put("Blitzer", "blitzer");  
        themes.put("Bluesky", "bluesky");  
        themes.put("Casablanca", "casablanca");  
        themes.put("Cupertino", "cupertino");  
        themes.put("Dark-Hive", "dark-hive");  
        themes.put("Dot-Luv", "dot-luv");  
        themes.put("Eggplant", "eggplant");  
        themes.put("Excite-Bike", "excite-bike");  
        themes.put("Flick", "flick");  
        themes.put("Glass-X", "glass-x");  
        themes.put("Hot-Sneaks", "hot-sneaks");  
        themes.put("Humanity", "humanity");  
        themes.put("Le-Frog", "le-frog");  
        themes.put("Midnight", "midnight");  
        themes.put("Mint-Choc", "mint-choc");  
        themes.put("Overcast", "overcast");  
        themes.put("Pepper-Grinder", "pepper-grinder");  
        themes.put("Redmond", "redmond");  
        themes.put("Rocket", "rocket");  
        themes.put("Sam", "sam");  
        themes.put("Smoothness", "smoothness");  
        themes.put("South-Street", "south-street");  
        themes.put("Start", "start");  
        themes.put("Sunny", "sunny");  
        themes.put("Swanky-Purse", "swanky-purse");  
        themes.put("Trontastic", "trontastic");  
        themes.put("UI-Darkness", "ui-darkness");  
        themes.put("UI-Lightness", "ui-lightness");  
        themes.put("Vader", "vader");  
		
		
	}
	
	
	
	@PostConstruct  //Init Method
	public void init() {  
		System.out.println("INIT Work ok");
		persona = new Persona();
		this.personaLista = new ArrayList<Persona>();
		persona.setRespuesta("Mi esposa");
	   	if(personaDao != null){
			//get all personas
			this.setPersonaLista(personaDao.buscarPersonas());
		}
		else{ 
			System.out.print("\n personDao is null \n");
		} 
	}  

	/**
	 * @return the mapTecnologies
	 */
	public Map<String, Integer> getMapTecnologies() {
		return MapTecnologies;
	}
	
	public Map<String, Integer> getMapFoot() {
		return this.MapFoot;
	}
	
	public Map<String,String> getThemes(){
		return this.themes;
	}
	
	public List<Persona> getPersonaLista(){
		return this.personaLista;
	}
	
	public void setPersonaLista(List<Persona> personas){
		this.personaLista=personas;
	}

	public String GuardarPersona() {
		System.out.print(persona.getPrimerNombre());
		personaDao.save(persona);
		this.setPersonaLista(personaDao.buscarPersonas());
		persona = new Persona();// limpia el formulario
		return "formularios?faces-redirect=true";
	}
	//guarda con el form de prime
	public String GuardarPersonaFromPrime() {
		if(personaDao != null){
			persona.setSystemUserName(Util.getCurrentUserName());
			personaDao.save(persona);
			this.setPersonaLista(personaDao.buscarPersonas());
			// limpia el formulario
			persona = new Persona();
			
		}
		else System.out.print("\n personDao is null \n");
		
		return "primeForm?faces-redirect=true";
		
	}
	
	public void removePersona(Long pId){
		System.out.print("removePersona");
		if(pId != 0){
			Persona p = personaDao.getPersonaById(pId);
			if(p!= null){
				personaDao.remove(p);
				this.setPersonaLista(personaDao.buscarPersonas());
			}
		}
		else
		System.out.print("\n no hay nada q eliminar");
	}
	
	public void testButtonActionListener(ActionEvent event) {
        System.out.println("testButtonActionListener invoked");
    }
	
	public String deleteAction(){
		FacesContext fc = FacesContext.getCurrentInstance();
		Map<String,String> params = fc.getExternalContext().getRequestParameterMap();
		String parametro = params.get("personaId");
		System.out.print("\n " + parametro);
		Persona toDelete;
		if(parametro != ""){
			for(Persona p : personaLista){
				if(p.getPrimerNombre() != null && p.getPrimerNombre().contains(parametro)){
					personaLista.remove(p);
					System.out.print("\n Se elimino: "+ p.toString() );
					break;
				}
			}
		}
		return null;
		
	}

	//marcar el objeto como editable
	public String editAction(Persona p){
		p.setEditable(true);
		return null;
	}
	
	public String GuardarCambios(){
		//get all existing value but set "editable" to false 
		for (Persona p : personaLista){
			p.setEditable(false);
		}
		//return to current page
		return null;

	}
	
	public void favoriteFootvalueChangeMethod(ValueChangeEvent e){
		  e.getComponent().processUpdates(FacesContext.getCurrentInstance()); //estas dos lineas para
		  FacesContext.getCurrentInstance().renderResponse();//que no dispare la validacion de jsf y tambien immediate="true" aya en el control
		System.out.print("Comida Favorita cambio: " + e.getNewValue().toString());
	}

	public void onEdit(RowEditEvent event) {  
        //FacesMessage msg = new FacesMessage("Car Edited", ((Persona) event.getObject()).getModel()); 
		Persona p = (Persona) event.getObject();
		System.out.print("\n Id: "+ p.getId());
		personaDao.update(p);
		FacesMessage msg = new FacesMessage( FacesMessage.SEVERITY_INFO,
                    "onEdit!",
                    "Se ha editado el se√±or(a): " + p.getPrimerNombre()	);
        FacesContext.getCurrentInstance().addMessage(null, msg);  
    }  
      
    public void onCancel(RowEditEvent event) {  
        //FacesMessage msg = new FacesMessage("Edit Cancelled", ((Persona) event.getObject()).getModel());  
		FacesMessage msg = new FacesMessage( FacesMessage.SEVERITY_WARN,
                    "onCancel!",
                    "Please Try Again!"	); 
        FacesContext.getCurrentInstance().addMessage(null, msg);  
    }  
}
